# Problem
# The GC-content of a DNA string is given by the percentage of symbols in the string that are 'C' or 'G'. For example, the GC-content of "AGCTATAG" is 37.5%. Note that the reverse complement of any DNA string has the same GC-content.
# 
# DNA strings must be labeled when they are consolidated into a database. A commonly used method of string labeling is called FASTA format. In this format, the string is introduced by a line that begins with '>', followed by some labeling information. Subsequent lines contain the string itself; the first line to begin with '>' indicates the label of the next string.
# 
# In Rosalind's implementation, a string in FASTA format will be labeled by the ID "Rosalind_xxxx", where "xxxx" denotes a four-digit code between 0000 and 9999.
# 
# Given: At most 10 DNA strings in FASTA format (of length at most 1 kbp each).
# 
# Return: The ID of the string having the highest GC-content, followed by the GC-content of that string. Rosalind allows for a default error of 0.001 in all decimal answers unless otherwise stated; please see the note on absolute error below.
#

def Compute_GC (seq):
	GC = 0
	total = 0
	for i in range(0, len(seq)):
		if seq[i] in ['A','T','G','C']:
			total = total +1
		if seq[i] in ['G', 'C']:
			GC = GC+1
	return float(GC)/total*100

def getMaxIndex(my_list):
    max = my_list[0]
    for i in my_list:
        if i > max:
            max = i
    return my_list.index(max)

file = open('rosalind_gc.txt','r')
id = list()
GC = list()
long_seq = ''
nowlen = 1
for seq in file.readlines():

		if (seq.startswith('>')):
			id.append(seq.lstrip('>'))
		else:
			seq = seq.rstrip('\n')
			long_seq = long_seq+seq
		
		if(len(id) > nowlen):
			nowlen = len(id)
			GC.append(Compute_GC(long_seq))
			long_seq = ''
GC.append(Compute_GC(long_seq))

no = getMaxIndex(GC)
print(id[no])
print("%.6f"%GC[no])
